#include <iostream>
using namespace std;

const int MAX_VERTICES = 100;

class Graph {
private:
int vertices;
int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
int adjacencyList[MAX_VERTICES][MAX_VERTICES];

public:
Graph(int V) {
vertices = V;
for (int i = 0; i < V; i++) {
for (int j = 0; j < V; j++) {
adjacencyMatrix[i][j] = 0;
adjacencyList[i][j] = 0;
}
}
}

void addEdge(int v, int w) {
adjacencyMatrix[v][w] = 1;
adjacencyMatrix[w][v] = 1;
adjacencyList[v][w] = 1;
adjacencyList[w][v] = 1;
}

void printGraphMatrix() {
cout << "Adjacency matrix:" << endl;
for (int i = 0; i < vertices; i++) {
for (int j = 0; j < vertices; j++) {
cout << adjacencyMatrix[i][j] << " ";
}
cout << endl;
}
}

void printGraphList() {
cout << "Adjacency list:" << endl;
for (int i = 0; i < vertices; i++) {
cout << "Vertex " << i << ": ";
for (int j = 0; j < vertices; j++) {
if (adjacencyList[i][j] == 1) {
cout << j << " ";
}
}
cout << endl;
}
}
};

int main() {
int V, E;
cout << "Enter the number of vertices: ";
cin >> V;
cout << "Enter the number of edges: ";
cin >> E;

Graph g(V);

for (int i = 0; i < E; i++) {
int v, w;
cout << "Enter edge " << (i + 1) << " (v w): ";
cin >> v >> w;
g.addEdge(v, w);
}

g.printGraphMatrix();
g.printGraphList();

return 0;
}
