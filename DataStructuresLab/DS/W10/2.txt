#include <iostream>
using namespace std;

struct TreeNode {
int data;
TreeNode* left;
TreeNode* right;
};

TreeNode* createBinaryTree() {
int value;
TreeNode* newNode = new TreeNode;
cout << "Enter data (or -1 to exit): ";
cin >> value;
if (value == -1) {
delete newNode;
return nullptr;
}
newNode->data = value;
cout << "Enter left child of " << value << ":\n";
newNode->left = createBinaryTree();
cout << "Enter right child of " << value << ":\n";
newNode->right = createBinaryTree();
return newNode;
}

void inOrderTraversal(TreeNode* root) {
if (root) {
inOrderTraversal(root->left);
cout << root->data << " ";
inOrderTraversal(root->right);
}
}

void postOrderTraversal(TreeNode* root) {
if (root) {
postOrderTraversal(root->left);
postOrderTraversal(root->right);
cout << root->data << " ";
}
}

void preOrderTraversal(TreeNode* root) {
if (root) {
cout << root->data << " ";
preOrderTraversal(root->left);
preOrderTraversal(root->right);
}
}

int countLeafNodes(TreeNode* root) {
if (root == nullptr)
return 0;
if (root->left == nullptr && root->right == nullptr)
return 1;
return countLeafNodes(root->left) + countLeafNodes(root->right);
}

int findParent(TreeNode* root, int target) {
if (root == nullptr)
return -1;

if ((root->left && root->left->data == target) || (root->right && root->right->data == target))
return root->data;

int leftResult = findParent(root->left, target);
if (leftResult != -1)
return leftResult;

return findParent(root->right, target);
}

int findDepth(TreeNode* root, int target, int depth) {
if (root == nullptr)
return -1;

if (root->data == target)
return depth;

int leftDepth = findDepth(root->left, target, depth + 1);
if (leftDepth != -1)
return leftDepth;

return findDepth(root->right, target, depth + 1);
}

int findAncestors(TreeNode* root, int target, int ancestor) {
if (root == nullptr)
return 0;

if (root->data == target)
return 1;

int leftAncestors = findAncestors(root->left, target, root->data);
if (leftAncestors) {
cout << ancestor << " ";
return 1;
}

int rightAncestors = findAncestors(root->right, target, root->data);
if (rightAncestors) {
cout << ancestor << " ";
return 1;
}

return 0;
}

int main() {
TreeNode* root = createBinaryTree();
cout << "In-order traversal: ";
inOrderTraversal(root);
cout << "\n";

cout << "Post-order traversal: ";
postOrderTraversal(root);
cout << "\n";

cout << "Pre-order traversal: ";
preOrderTraversal(root);
cout << "\n";

int leafCount = countLeafNodes(root);
cout << "Number of leaf nodes: " << leafCount << endl;

int target;
cout << "Enter the target element: ";
cin >> target;

int parent = findParent(root, target);
if (parent != -1)
cout << "Parent of " << target << " is: " << parent << endl;
else
cout << "No parent found for " << target << endl;

int depth = findDepth(root, target, 0);
if (depth != -1)
cout << "Depth of " << target << " is: " << depth << endl;
else
cout << target << " not found in the tree." << endl;

cout << "Ancestors of " << target << " are: ";
findAncestors(root, target, -1);
cout << endl;

return 0;
}
