#include <iostream>
using namespace std;

int priority(char alpha) {
    if (alpha == '+' || alpha == '-')
        return 1;

    if (alpha == '*' || alpha == '/')
        return 2;

    if (alpha == '^')
        return 3;

    return 0;
}

class Stack {
private:
    char data[100];
    int top;

public:
    Stack() {
        top = -1;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == 99;
    }

    void push(char item) {
        if (isFull()) {
            cout << "Stack Overflow!" << endl;
            return;
        }
        data[++top] = item;
    }

    char pop() {
        if (isEmpty()) {
            cout << "Stack Underflow!" << endl;
            return '\0'; // Return null character for an empty stack
        }
        return data[top--];
    }

    char peek() {
        if (isEmpty()) {
            cout << "Stack is empty!" << endl;
            return '\0'; // Return null character for an empty stack
        }
        return data[top];
    }
};

string convert(string infix) {
    int i = 0;
    string postfix = "";
    Stack s;

    while (infix[i] != '\0') {
        if (infix[i] >= 'a' && infix[i] <= 'z' || infix[i] >= 'A' && infix[i] <= 'Z') {
            postfix += infix[i];
            i++;
        }
        else if (infix[i] == '(') {
            s.push(infix[i]);
            i++;
        }
        else if (infix[i] == ')') {
            while (s.peek() != '(') {
                postfix += s.pop();
            }
            s.pop();
            i++;
        }
        else {
            while (!s.isEmpty() && priority(infix[i]) <= priority(s.peek())) {
                postfix += s.pop();
            }
            s.push(infix[i]);
            i++;
        }
    }
    while (!s.isEmpty()) {
        postfix += s.pop();
    }

    cout << "Postfix is : " << postfix;
    return postfix;
}

int main() {
    string infix;
    cout << "Enter an infix expression: ";
    cin >> infix;

    string postfix;
    postfix = convert(infix);

    return 0;
}
