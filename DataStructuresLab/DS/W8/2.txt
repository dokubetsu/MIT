#include <iostream>

using namespace std;

class Node {
public:
int data;
Node* next;

Node(int value) {
data = value;
next = nullptr;
}
};

class Queue {
private:
Node* front;
Node* rear;

public:
Queue() {
front = rear = nullptr;
}

void enqueue(int value) {
Node* newNode = new Node(value);
if (rear == nullptr) {
front = rear = newNode;
return;
}
rear->next = newNode;
rear = newNode;
}

void dequeue() {
if (front == nullptr) {
cout << "Queue is empty." << endl;
return;
}
Node* temp = front;
front = front->next;
delete temp;
}

int frontValue() {
if (front != nullptr) {
return front->data;
}
else {
cout << "Queue is empty." << endl;
return -1; // Return a default value for an empty queue
}
}

bool isEmpty() {
return front == nullptr;
}

void display() {
Node* current = front;
if (current == nullptr) {
cout << "Queue is empty." << endl;
return;
}
cout << "Queue elements: ";
while (current != nullptr) {
cout << current->data << " ";
current = current->next;
}
cout << endl;
}
};

int main() {
Queue queue;
queue.enqueue(1);
queue.enqueue(2);
queue.enqueue(3);

cout << "Front element: " << queue.frontValue() << endl;
queue.display();

queue.dequeue();
cout << "Front element after dequeue: " << queue.frontValue() << endl;
queue.display();

queue.dequeue();
queue.dequeue();
queue.display();

return 0;
}
